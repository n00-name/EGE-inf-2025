# Функция для получения числа R по описанному алгоритму
def get_new_number(N):
    # Двоичное представление числа N
    binary_N = bin(N)[2:]

    # Подсчитываем количество единичных битов в двоичной записи
    ones_count = binary_N.count('1')

    # Добавляем бит чётности
    if ones_count % 2 == 0:
        binary_N += '0'  # Чётное количество единичных битов - добавляем 0
    else:
        binary_N += '1'  # Нечётное количество единичных битов - добавляем 1

    # Подсчитываем количество единичных битов в новой записи
    ones_count = binary_N.count('1')

    # Добавляем второй бит чётности
    if ones_count % 2 == 0:
        binary_N += '0'  # Чётное количество единичных битов - добавляем 0
    else:
        binary_N += '1'  # Нечётное количество единичных битов - добавляем 1

    # Преобразуем полученную двоичную строку обратно в десятичное число
    return int(binary_N, 2)


# Ищем минимальное число N, после обработки которого результат больше 116
N = 1
while True:
    R = get_new_number(N)
    if R > 116:
        print(f"Минимальное число N: {N}, результат R: {R}")
        break
    N += 1
